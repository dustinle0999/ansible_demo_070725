---
- name: Deploy NGINX (unprivileged) with X replicas and validate deployment on OpenShift
  hosts: localhost
  gather_facts: false

  vars:
    ocp_username: "{{ ansible_user }}"
    ocp_password: "{{ ansible_password }}"
    ocp_api: "{{ ocp_api_host | default('localhost') }}"
    ocp_namespace: "{{ ocp_namespace | default('nginx-demo') }}"
    num_replica: "{{ num_replica | default('2') }}"

  tasks:
    # 1) Authenticate and fetch API token
    - name: Authenticate to OCP and generate token
      redhat.openshift.openshift_auth:
        username: "{{ ocp_username }}"
        password: "{{ ocp_password }}"
        host: "{{ ocp_api }}"
        validate_certs: no
      register: openshift_auth_results

    # 2) Ensure the namespace/project exists
    - name: Create project/namespace if it does not exist
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: "{{ ocp_namespace }}"
        state: present
        host: "{{ ocp_api }}"
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"

    # 3) Deploy NGINX (unprivileged) with X replicas
    - name: Deploy NGINX (unprivileged) with X replicas
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: nginx-deployment
            namespace: "{{ ocp_namespace }}"
          spec:
            replicas: "{{ num_replica }}"
            selector:
              matchLabels:
                app: nginx
            template:
              metadata:
                labels:
                  app: nginx
              spec:
                containers:
                  - name: nginx
                    image: "nginxinc/nginx-unprivileged:stable"
                    ports:
                      - containerPort: 8080 # image listens on 8080
        host: "{{ ocp_api }}"
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"

    # 4) Expose the Deployment with a ClusterIP Service
    - name: Expose NGINX deployment as a ClusterIP service
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: nginx-service
            namespace: "{{ ocp_namespace }}"
          spec:
            selector:
              app: nginx
            ports:
              - protocol: TCP
                port: 80 # service port inside the cluster
                targetPort: 8080 # pod’s container port
            type: ClusterIP
        host: "{{ ocp_api }}"
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"

    # 5) Validation — list pods in the namespace
    - name: Get pods in nginx-demo namespace
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ ocp_namespace }}"
        host: "{{ ocp_api }}"
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
      register: nginx_pods

    - name: Display pod status
      ansible.builtin.debug:
        msg: |
          Pods in namespace '{{ ocp_namespace }}':
          {% for pod in nginx_pods.resources %}
            - Name: {{ pod.metadata.name }}, Phase: {{ pod.status.phase }}
          {% endfor %}
